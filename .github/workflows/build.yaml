name: Dynamic Build and Deployment Pipeline

on:
  push:
    branches:
      - dev  # Trigger pipeline on changes pushed to the dev branch
  workflow_dispatch:  # Allows manual trigger for deployment jobs
env:
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed-services }}
      root-folder: ${{ steps.detect.outputs.root-folder }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the last two commits to allow HEAD~1

      - name: Detect Changed Services
        id: detect
        run: |
            # Initialize empty strings for root folder and changed services
            ROOT_FOLDER=""
            CHANGED_SERVICES=""
            # Get the diff of changed files between the previous commit and the current commit
            for changed_file in $(git diff --name-only HEAD~1 HEAD); do
            # Check if the change is within core-services or business-services
            if [[ "$changed_file" =~ ^core-services/ ]]; then
                # Set the root folder to core-services and extract the service path
                ROOT_FOLDER="core-services"
                SERVICE_PATH=$(echo "$changed_file" | cut -d/ -f2)  # Get the second part after core-services/
                CHANGED_SERVICES="${CHANGED_SERVICES} ${SERVICE_PATH} "
            elif [[ "$changed_file" =~ ^business-services/ ]]; then
                # Set the root folder to business-services and extract the service path
                ROOT_FOLDER="business-services"
                SERVICE_PATH=$(echo "$changed_file" | cut -d/ -f2)  # Get the second part after business-services/
                CHANGED_SERVICES="${CHANGED_SERVICES} ${SERVICE_PATH} "
            fi
            done
            # Set the output for root-folder
            echo "::set-output name=root-folder::$ROOT_FOLDER"
            # Output the result as a valid JSON array
            if [[ -n "$CHANGED_SERVICES" ]]; then
                CHANGED_SERVICES_JSON="[\"$(echo $CHANGED_SERVICES | sed 's/,/","/g')\"]"
                echo "::set-output name=changed-services::$CHANGED_SERVICES_JSON"
            else
                echo "::set-output name=changed-services::[]"
            fi
      - name: Debug Output
        run: |
          echo "Changed Services: ${{ steps.detect.outputs.changed-services }}"
          echo "root-folder: ${{ steps.detect.outputs.root-folder }}"
    
  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed-services != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    outputs:
      docker_image: ${{ steps.save_docker_image.outputs.docker_image }}
      db_image: ${{ steps.save_db_image.outputs.db_image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Generate the Next Tag
        id: tag
        run: |
          echo "Generating the next tag for service: ${{ matrix.service }}"
      
          # Set variables
          BRANCH=${{ github.ref_name }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          SERVICE_NAME=${{ matrix.service }}
      
          # Log in to Docker Hub and fetch a token
          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' | jq -r .token)
      
          # Check if the repository exists
          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/")
      
          if [ "$REPO_CHECK" -ne 200 ]; then
            echo "Repository does not exist. Assuming a first-time build."
            NEXT_TAG="${BRANCH}-${COMMIT_HASH}"
          else
            # Fetch existing tags for the service
            EXISTING_TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/tags?page_size=100" | jq -r '.results[].name')
      
            # Filter for the current branch and commit hash
            LATEST_TAG=$(echo "$EXISTING_TAGS" | grep "^${BRANCH}-${COMMIT_HASH}" | sort -V )
            if [ -z "$LATEST_TAG" ]; then
              # No tag exists for this branch and commit hash
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}"
            # else
            #   # Increment the numeric part of the latest tag
            #   TAG_NUMBER=$(echo "$LATEST_TAG" | awk -F- '{print $NF}')
            #   NEXT_TAG="${BRANCH}-${COMMIT_HASH}-$(TAG_NUMBER)"
            fi
          fi
      
          # Export the next tag
          echo "::set-output name=tag::$NEXT_TAG"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          echo "Generated Tag: $NEXT_TAG"
          echo "ma"

      - name: Build and Push Application Docker Image
        id: build_push_docker
        uses: docker/build-push-action@v5
        with:
            context: .
            file: build/maven/Dockerfile
            push: true
            tags: |
                ${{ vars.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
            build-args: |
                WORK_DIR=${{ needs.detect-changes.outputs.root-folder }}/${{ matrix.service }}
            
      - name: Check if DB folder exists
        id: check-db-folder
        run: |
            FOLDER_PATH="${{ needs.detect-changes.outputs.root-folder }}/${{ matrix.service }}/src/main/resources/db"
            if [ -d "$FOLDER_PATH" ]; then
                echo "folder_exists=true" >> $GITHUB_ENV
            else
                echo "folder_exists=false" >> $GITHUB_ENV
            fi
    
      - name: Build and Push Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        id: build_push_db_docker
        uses: docker/build-push-action@v5
        with:   
            context: ${{ needs.detect-changes.outputs.root-folder }}/${{ matrix.service }}/src/main/resources/db
            file: ${{ needs.detect-changes.outputs.root-folder }}/${{ matrix.service }}/src/main/resources/db/Dockerfile
            push: true
            tags: |
                ${{ vars.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}
      - name: Save Application Docker Image
        id: save_docker_image
        run: |
          DOCKER="$DOCKER_USERNAME/${{ matrix.service }}:${{ steps.tag.outputs.tag }}"
          echo "docker_image=$DOCKER"
          echo "docker_image=$DOCKER" >> "$GITHUB_OUTPUT"
          
      - name: Save Database Docker Image
        id: save_db_image
        if: ${{ env.folder_exists == 'true' }}
        run: |
          DB="$DOCKER_USERNAME/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}"
          echo "db_image=$DB"
          echo "db_image=$DB" >> "$GITHUB_OUTPUT"
        
  unified-dev-Deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: Dev # Maps to the Dev environment in GitHub settings
    env:
      DOCKER_IMAGE: ${{ needs.build.outputs.docker_image }}
      DB_IMAGE: ${{ needs.build.outputs.db_image }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Clone Deployment Repository
        uses: actions/checkout@v3
        with:
          repository: Harish-test-12/DIGIT-DevOps-1
          fetch-depth: 0

      - name: Install SOPS
        run: |
          echo "Checking if SOPS is installed..."
          if ! command -v sops &> /dev/null; then
            echo "SOPS not found. Installing..."
            SOPS_LATEST_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
            curl -Lo sops.deb "https://github.com/getsops/sops/releases/download/v${SOPS_LATEST_VERSION}/sops_${SOPS_LATEST_VERSION}_amd64.deb"
            sudo apt --fix-broken install ./sops.deb
            sudo apt-get update
            sudo apt-get install sops
          else
            echo "SOPS is already installed"
          fi

      - name: Decrypt secrets file (without applying to cluster)
        run: |
          # Checkout the unified-env-lts branch
          git checkout unified-env-lts
          SECRETS_FILE="./deploy-as-code/helm/environments/unified-dev-secrets.yaml"
          echo "Decrypting secrets file: ${SECRETS_FILE}"
          
          # Specify the path to .sops.yaml if it's not in the root directory
          SOPS_CONFIG_PATH="./deploy-as-code/helm/.sops.yaml" # Update this if your .sops.yaml is in a different location
          
          # Decrypt the secrets using the .sops.yaml config file
          sops --config $SOPS_CONFIG_PATH -i --decrypt $SECRETS_FILE
          # Optionally, print the decrypted content to verify
          cat $SECRETS_FILE | grep "admin-email"

      - name: Checkout Branch for Environment File and Helm Charts
        run: |
          # Checkout the unified-env-lts branch
          git checkout unified-env-lts
          
          # Define the path to the environment file
          ENV_FILE_PATH="./deploy-as-code/helm/environments/unified-dev.yaml"
          
          # Check if the environment file exists
          if [ ! -f "$ENV_FILE_PATH" ]; then
            echo "Error: The specified environment file $ENV_FILE_PATH does not exist"
            exit 1
          fi
          
          echo "Using environment file: $ENV_FILE_PATH"
          
          # Extract domain name under the global section using yq
          DOMAIN_NAME=$(yq e '.global.domain' $ENV_FILE_PATH)
          
          # Check if the domain name exists in the environment file
          if [ -z "$DOMAIN_NAME" ]; then
            echo "Error: Domain name not found in the environment file"
            exit 1
          fi
          
          echo "Domain Name: $DOMAIN_NAME"
          
          # Set the domain name as an environment variable
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV
      - name: Install or Update AWS CLI
        run: |
          if aws --version &>/dev/null; then
            echo "AWS CLI is already installed. Skipping installation."
          else
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version
      - name: Generate kubeconfig for EKS
        run: |
          # Set AWS credentials using GitHub secrets
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          
          # Specify the EKS cluster name (you can set this as a secret or environment variable)
          CLUSTER_NAME="unified-dev"  # Replace with your actual cluster name or use a secret/environment variable
          # Generate the kubeconfig for the EKS cluster
          echo "Generating kubeconfig for EKS cluster: $CLUSTER_NAME"
          
          # Update kubeconfig using AWS CLI
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          
          # View the generated kubeconfig to confirm
          kubectl config view
  
      # Step 6: Verify Cluster Login
      - name: Verify Cluster Login
        run: |
          echo "Attempting to log in to Kubernetes cluster"
          kubectl config current-context
      - name: Validate Image Variables
        run: |
          if [ -z "${DOCKER_IMAGE}" ]; then
            echo "Error: DOCKER_IMAGE is empty."
            exit 1
          fi
          if [ -z "${DB_IMAGE}" ]; then
            echo "Warning: DB_IMAGE is empty. Proceeding without DB deployment."
          fi
        
      - name: Deploy Secrets and Configs
        run: |
          # Checkout the unified-env-lts branch
          git checkout unified-env-lts
          echo "Deploying secrets and cluster configurations..."
          CONFIGS_DIR="./deploy-as-code/helm/charts/cluster-configs"
          SECRETS_FILE="${CONFIGS_DIR}/secrets/unified-dev-secrets.yaml"

          if [ ! -f "$SECRETS_FILE" ]; then
            echo "Error: Secrets file $SECRETS_FILE does not exist"
            exit 1
          fi

          echo "Applying secrets..."
          kubectl apply -f "$SECRETS_FILE"

          echo "Applying cluster configuration files..."
          for resource in secrets services ingress configmaps; do
            RESOURCE_DIR="$CONFIGS_DIR/$resource"
            if [ -d "$RESOURCE_DIR" ]; then
              kubectl apply -f "$RESOURCE_DIR" --recursive
              echo "Applied configurations from $RESOURCE_DIR"
            else
              echo "No configurations found for $resource"
            fi
          done

      - name: Deploy Service
        run: |
          # Authenticate with Docker registry
          echo "Logging into Docker registry..."
          echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
          
          # Debug: Check if DOCKER_IMAGE is set
          echo "DOCKER_IMAGE: $DOCKER_IMAGE"
          if [ -z "$DOCKER_IMAGE" ]; then
            echo "Error: DOCKER_IMAGE is empty. Exiting deployment."
            exit 1
          fi
      
          # Define the base charts directory
          CHARTS_DIR="./deploy-as-code/helm/charts"
      
          # Extract service name from the Docker image
          SERVICE_NAME=$(echo "$DOCKER_IMAGE" | awk -F'/' '{print $NF}' | cut -d':' -f1)
          echo "Extracted SERVICE_NAME: $SERVICE_NAME"
      
          # Recursively search for the chart directory containing the service name
          CHART_DIR=$(find "$CHARTS_DIR" -type d -name "$SERVICE_NAME" -exec test -f {}/Chart.yaml \; -print -quit)
          if [ -z "$CHART_DIR" ]; then
            echo "Error: No Helm chart found for service '$SERVICE_NAME' in $CHARTS_DIR."
            exit 1
          fi
      
          echo "Found Helm chart for '$SERVICE_NAME' at: $CHART_DIR"

          echo "Building Helm chart dependencies..."
          helm dependency build "$CHART_DIR"

          # Detect namespace from Helm chart (default to 'egov' if not defined)
          NAMESPACE=$(yq e '.namespace // "egov"' "$CHART_DIR/values.yaml")
          echo "Using namespace: $NAMESPACE"
      
          # Extract the repository and tag for the application image
          APP_IMAGE_REPO="${DOCKER_IMAGE%:*}"
          APP_IMAGE_TAG="${DOCKER_IMAGE##*:}"
      
          # Dynamically set the database image to use the same tag as the application image
          DB_IMAGE_REPO="${DOCKER_USERNAME}/${SERVICE_NAME}-db"
          DB_IMAGE_TAG="${APP_IMAGE_TAG}"
          DB_IMAGE="${DB_IMAGE_REPO}:${DB_IMAGE_TAG}"
          echo "Database Image: $DB_IMAGE"
      
          # Check if the DB image exists
          echo "Checking for database image: $DB_IMAGE"
          if docker pull "$DB_IMAGE" &>/dev/null; then
            echo "Database image found: $DB_IMAGE"
            DB_IMAGE_EXISTS=true
          else
            echo "No database image found for service '$SERVICE_NAME'. Skipping DB deployment."
            DB_IMAGE_EXISTS=false
          fi
      
          # Deploy the database container only if the image exists
          if [ "$DB_IMAGE_EXISTS" = true ]; then
            echo "Deploying the database container using Helm..."
            helm upgrade --install "${SERVICE_NAME}" "$CHART_DIR" \
              --namespace "$NAMESPACE" \
              -f "$CHART_DIR/values.yaml" \
              --set image.repository="$APP_IMAGE_REPO" \
              --set image.tag="$APP_IMAGE_TAG" \
              --set initContainers.dbMigration.image.tag="$DB_IMAGE_TAG" \
              --set global.domain="$DOMAIN_NAME"
          else
            echo "Deploying application service using Helm..."
            helm upgrade --install "$SERVICE_NAME" "$CHART_DIR" \
              --namespace "$NAMESPACE" \
              -f "$CHART_DIR/values.yaml" \
              --set image.repository="$APP_IMAGE_REPO" \
              --set image.tag="$APP_IMAGE_TAG" \
              --set global.domain="$DOMAIN_NAME"
          fi
        shell: /usr/bin/bash -e {0}

      - name: Cleanup Cloned Repository
        if: always()  # Ensures this runs even if a previous step fails
        run: |
          echo "Cleaning up cloned repository..."
          rm -rf ./Harish-test-12/DIGIT-DevOps-1
          echo "Repository cleaned up."